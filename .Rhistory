library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = TRUE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(routes_tidy)
View(Q)
View(Q)
View(Q)
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(routes_tidy)
View(Q)
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(routes_igraph)
View(Q)
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(routes_igraph)
Q
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
routes_tidy <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(routes_tidy)
Q
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
grafo <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q = laplacian_matrix(grafo)
Q
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
grafo <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
Q
library(tidygraph)
library(igraph)
library(ggraph)
library(tidyverse)
# make edges
edges<- tibble(from = c("a","a","a","a","b","b","c","c","d","d","e","e","f","g","g","h","h","i","i","j","k"),
to = c("b","d","e","h","g","c","f","j","e","k","f","i","g","h","l","i","l","j","k","l","l"))
# makenodes
nodes  <- unique(c(edges$from,edges$to))
tibble(node=nodes,
label=nodes) -> nodes
# make correct dataframe
routes_igraph <- graph_from_data_frame(d = edges,
vertices = nodes,
directed = FALSE)
grafo <- as_tbl_graph(routes_igraph)
#plot network
ggraph(routes_tidy, layout = 'linear', circular = TRUE) +
geom_edge_link() +
geom_node_point() +
theme_graph() +
geom_node_text(aes(label = label), repel = TRUE)
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = determinant(Q)# Número de árboles de expansión de H
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = determinant(Q)# Número de árboles de expansión de H
View(Q)
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = matrix.determinant(Q)# Número de árboles de expansión de H
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = determinant.matrix(Q)# Número de árboles de expansión de H
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = det(Q)# Número de árboles de expansión de H
View(Q)
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H = det(Q) # Número de árboles de expansión de H
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H <- det(Q) # Número de árboles de expansión de H
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
t_H <- det(Q) # Número de árboles de expansión de H
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
t_H <- determinant(Q, logarithm = FALSE)$modulus # Número de árboles de expansión de H
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
t_H <- determinant(Q, logarithm = FALSE)$modulus # Número de árboles de expansión de H
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
t_H <- det(as_dense(Q)) # Número de árboles de expansión de H
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-1, -1] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
t_H <- det(as.matrix(Q)) # Número de árboles de expansión de H
sprintf("El número de árboles de expansión de H es t(H)= %s.", t_H)
#Calcule el número de árboles de expansión de H.
Q <- laplacian_matrix(grafo) # Crear la matriz Q del grafo
Q <- Q[-2, -2] # Eliminar una fila y una columna de la matriz Q (En este caso 1 y 1)
class(Q)
t_H <- det(as.matrix(Q)) # Número de árboles de expansión de H
sprintf("El número de árboles de expansión de H es t(H)= %s.", t_H)
setwd("C:/Users/citro/OneDrive/Documentos/GitHub/proyectopyeii")
# CARGA DE BASE (CSV)----------
# Cargar Readr para la lectura de la base
library(readr)
# Asignar ruta de acceso - CAMBIAR DEPENDIENDO DE LA UBICACIÓN
ruta_base <- "garments_worker_productivity.csv"
# CARGA DE BASE (CSV)----------
# Cargar Readr para la lectura de la base
library(readr)
# Asignar ruta de acceso - CAMBIAR DEPENDIENDO DE LA UBICACIÓN
ruta_base <- "garments_worker_productivity.csv"
# Carga base, vista de datos
datos_base <- read.csv(ruta_base, header = TRUE, sep = ",", stringsAsFactors = FALSE)
View(datos_base)
# Limpiar la base ----------
# Eliminar la columna 'wip', dado que esta tiene datos vacios
datos_base <- subset(datos_base, select = -wip)
View(datos_base)
# (10) Análisis descriptivo de variables cuantitativas ----------
# Instalar y cargar paquetes si no están instalados
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
if(!require(psych)) install.packages("psych")
if(!require(corrplot)) install.packages("corrplot")
# Cargar los paquetes previamente instalados
library(ggplot2)
library(dplyr)
library(psych)
library(corrplot)
# Calcular estadísticos de tendencia central
datos_centrales <- datos_base %>%
summarize(
media_productividad = mean(targeted_productivity, na.rm = TRUE),
mediana_productividad = median(targeted_productivity, na.rm = TRUE),
media_smv = mean(smv, na.rm = TRUE),
mediana_smv = median(smv, na.rm = TRUE),
media_over_time = mean(over_time, na.rm = TRUE),
mediana_over_time = median(over_time, na.rm = TRUE),
media_incentivo = mean(incentive, na.rm = TRUE),
mediana_incentivo = median(incentive, na.rm = TRUE)
)
datos_centrales
# Calcular estadísticos de dispersión
datos_dispersion <- datos_base %>%
summarize(
sd_productividad = sd(targeted_productivity, na.rm = TRUE),
iqr_productividad = IQR(targeted_productivity, na.rm = TRUE),
sd_smv = sd(smv, na.rm = TRUE),
iqr_smv = IQR(smv, na.rm = TRUE),
sd_over_time = sd(over_time, na.rm = TRUE),
iqr_over_time = IQR(over_time, na.rm = TRUE),
sd_incentivo = sd(incentive, na.rm = TRUE),
iqr_incentivo = IQR(incentive, na.rm = TRUE)
)
datos_dispersion
# (10pt) Análisis descriptivo de variables cuantitativas (univariado y bivariado) ----------
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
library(ggplot2)
library(dplyr)
# Categorize incentive into ranges
datos_base <- datos_base %>%
mutate(incentive_range = cut(incentive,
breaks = c(-Inf, 25, 50, 75, 100, Inf),
labels = c("0-25", "25-50", "50-75", "75-100", "100+")))
# Plot actual_productivity by day with facet_wrap for day and colored by incentive range
ggplot(datos_base, aes(x = actual_productivity, fill = incentive_range)) +
geom_histogram(binwidth = 0.05, color = "black", alpha = 0.7) +
facet_wrap(~ day) +
labs(title = "Distribución de la Productividad Real según el Día y Rango de Incentivo",
x = "Productividad Real", y = "Frecuencia") +
scale_fill_brewer(palette = "Blues", name = "Rango de Incentivo") +
theme_minimal()
# Mapa de calor de no_of_workers por día y departamento
ggplot(datos_base, aes(x = day, y = department, fill = no_of_workers)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Mapa de calor de no_of_workers por día y departamento",
x = "Día de la semana", y = "Departmento", fill = "Número de trabajadores") +
theme_minimal()
# Mapa de calor de no_of_workers por día y departamento
ggplot(datos_base, aes(x = day, y = department, fill = no_of_workers)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "black") +
labs(title = "Mapa de calor de no_of_workers por día y departamento",
x = "Día de la semana", y = "Departmento", fill = "Número de trabajadores") +
theme_minimal()
# Mapa de calor de no_of_workers por día y departamento
ggplot(datos_base, aes(x = day, y = department, fill = no_of_workers)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lavender", high = "darkblue") +
labs(title = "Mapa de calor de no_of_workers por día y departamento",
x = "Día de la semana", y = "Departmento", fill = "Número de trabajadores") +
theme_minimal()
ggplot(datos_base, aes(x = day, y = department, fill = no_of_workers)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lavender", high = "darkgreen") +
labs(title = "Mapa de calor de no_of_workers por día y departamento",
x = "Día de la semana", y = "Departmento", fill = "Número de trabajadores") +
theme_minimal()
# Histograma de incentivo
ggplot(datos_base, aes(x = incentive)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Distribution of Incentive", x = "Incentive", y = "Frequency") +
theme_minimal()
# Histograma de incentivo
ggplot(datos_base, aes(x = incentive)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Incentive", x = "Incentive", y = "Frequency") +
theme_minimal()
# Histograma de incentivo
ggplot(datos_base, aes(x = incentive)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribution of Incentive", x = "Incentive", y = "Frequency") +
theme_minimal()
ggplot(datos_base, aes(y = no_of_workers)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Number of Workers", x = "", y = "Number of Workers") +
theme_minimal()
ggplot(datos_base, aes(x = smv)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Density of SMV", x = "SMV", y = "Density") +
theme_minimal()
# Histograma de incentivo
ggplot(datos_base, aes(x = incentive)) +
geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
labs(title = "Distribution of Incentive", x = "Incentive", y = "Frequency") +
theme_minimal()
# Densityplot de smv
ggplot(datos_base, aes(x = smv)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Density of SMV", x = "SMV", y = "Density") +
theme_minimal()
# Violinplot de targeted_productivity
ggplot(datos_base, aes(y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribution of Targeted Productivity", x = "", y = "Targeted Productivity") +
theme_minimal()
# Histograma con la densidad superpuesta de actual_productivity
ggplot(datos_base, aes(x = actual_productivity)) +
geom_histogram(aes(y = ..density..), binwidth = 0.05, fill = "lightcoral", color = "black", alpha = 0.7) +
geom_density(color = "darkred", size = 1) +
labs(title = "Distribution of Actual Productivity", x = "Actual Productivity", y = "Density") +
theme_minimal()
# Histograma con la densidad superpuesta de actual_productivity
ggplot(datos_base, aes(x = actual_productivity)) +
geom_histogram(aes(y = after_stat(density)), binwidth = 0.05, fill = "lightcoral", color = "black", alpha = 0.7) +
geom_density(color = "darkred", size = 1) +
labs(title = "Distribution of Actual Productivity", x = "Actual Productivity", y = "Density") +
theme_minimal()
# Violinplot de targeted_productivity
ggplot(datos_base, aes(y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribución de targeted_productivity", x = "", y = "targeted_productivity") +
theme_minimal()
ggplot(datos_base, aes(y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribution of Targeted Productivity", x = "", y = "Targeted Productivity") +
theme_minimal()
ggplot(datos_base, aes(x = department, y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribution of Targeted Productivity", x = "Department", y = "Targeted Productivity") +
theme_minimal()
# Violinplot de target_productivity según cada departamento
ggplot(datos_base, aes(x = department, y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribución de target_productivity", x = "Departamento", y = "target_productivity") +
theme_minimal()
# Categorize incentive into ranges
datos_base <- datos_base %>%
mutate(incentive_range = cut(incentive,
breaks = c(-Inf, 25, 50, 75, 100, Inf),
labels = c("0-25", "25-50", "50-75", "75-100", "100+")))
# Plot actual_productivity by day with facet_wrap for day and colored by incentive range
ggplot(datos_base, aes(x = actual_productivity, fill = incentive_range)) +
geom_histogram(binwidth = 0.05, color = "black", alpha = 0.7) +
facet_wrap(~ day) +
labs(title = "Distribución de la Productividad Real según el Día y Rango de Incentivo",
x = "Productividad Real", y = "Frecuencia") +
scale_fill_brewer(palette = "Blues", name = "Rango de Incentivo") +
theme_minimal()
# Densityplot de smv
ggplot(datos_base, aes(x = smv)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Density of SMV", x = "SMV", y = "Density") +
theme_minimal()
# Densityplot de smv
ggplot(datos_base, aes(x = smv)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Plot de densidad de SMV", x = "SMV", y = "Density") +
theme_minimal()
# Violinplot de target_productivity según cada departamento
ggplot(datos_base, aes(x = department, y = targeted_productivity)) +
geom_violin(fill = "orchid", color = "black", trim = FALSE) +
labs(title = "Distribución de target_productivity", x = "Departamento", y = "target_productivity") +
theme_minimal()
# Histograma con la densidad superpuesta de actual_productivity
ggplot(datos_base, aes(x = actual_productivity)) +
geom_histogram(aes(y = after_stat(density)), binwidth = 0.05, fill = "lightcoral", color = "black", alpha = 0.7) +
geom_density(color = "darkred", size = 1) +
labs(title = "Distribución de actual_productivity", x = "actual_productivity", y = "densidad") +
theme_minimal()
ggplot(datos_base, aes(x = day, y = department, fill = no_of_workers)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lavender", high = "darkgreen") +
labs(title = "Mapa de calor de no_of_workers por día y departamento",
x = "Día de la semana", y = "Departmento", fill = "Número de trabajadores") +
theme_minimal()
